// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 effective-4.2 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name LiveView
import Dip
import Foundation
import QuickLook
import Starscream
import Swift
import SwiftProtobuf
import UIKit
import WebKit
import _Concurrency
import os
@objc @_inheritsConvenienceInitializers @objcMembers public class ActiveUser : ObjectiveC.NSObject {
  @objc public var id: Swift.String?
  @objc public var firstname: Swift.String?
  @objc public var lastname: Swift.String?
  @objc public var email: Swift.String?
  @objc public var tags: [Swift.String]?
  @objc public var assignedUser: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public struct BidirectionalMessage {
}
public struct Click {
}
@_inheritsConvenienceInitializers @objc public class Chatvisor : ObjectiveC.NSObject {
  @objc public static func liveView() -> LiveView.ChatvisorLiveView
  @objc public static func coBrowsing() -> LiveView.ChatvisorCoBrowsing
  @objc public static func webChat() -> LiveView.ChatvisorWebChat
  @objc public static func configuration() -> LiveView.ChatvisorConfiguration
  @objc public static func user() -> LiveView.ChatvisorUser
  @objc public static func initConfig(tenantId: Swift.String, token: Swift.String) -> LiveView.InitConfiguration?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class InitConfiguration : ObjectiveC.NSObject {
  @objc public func withCustomServer(hostname: Swift.String) -> LiveView.InitConfiguration
  @objc public func withCustomCdnServer(cdnServer: Swift.String) -> LiveView.InitConfiguration
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChatvisorAPI {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ChatvisorCoBrowsing : ObjectiveC.NSObject {
  @objc public func start(with tenantId: Swift.String, and token: Swift.String)
  @objc public func start()
  @objc public func stop()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ChatvisorConfiguration : ObjectiveC.NSObject {
  @objc public func setCdnServer(hostname: Swift.String)
  @objc public func setServer(hostname: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ChatvisorLiveView : ObjectiveC.NSObject {
  @objc public func start(with userId: Swift.String, and token: Swift.String)
  @objc public func start()
  @objc public func stop()
  @objc public func connected() -> Swift.Bool
  @objc public func tag(_ tag: Swift.String)
  @objc public func registerCallbacks(forStart startCallback: @escaping () -> Swift.Void, andStop stopCallback: @escaping () -> Swift.Void)
  @objc public func shareId() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ChatvisorUser : ObjectiveC.NSObject {
  @objc public func tag(_ user: LiveView.ActiveUser)
  @objc public func tag(_ user: LiveView.ActiveUser, callback: @escaping (Swift.Bool) -> ())
  @objc public func clear()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ChatvisorWebChat : ObjectiveC.NSObject {
  @objc public func open(for tenantId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommunicationBase {
  public func registerStatus()
  public func releaseStatus()
  public func release(id: Swift.String)
  public func releaseAll()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Injection {
  public static func getContainer() -> Dip.DependencyContainer
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UserUtil {
  public static func tagUserIfNeeded(callback: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
