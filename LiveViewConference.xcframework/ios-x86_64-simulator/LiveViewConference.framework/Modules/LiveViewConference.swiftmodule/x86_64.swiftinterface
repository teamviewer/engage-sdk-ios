// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 effective-4.2 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name LiveViewConference
import Dip
import Foundation
import JitsiMeetSDK
import QuickLook
import Swift
import SwiftProtobuf
import UIKit
import WebKit
import _Concurrency
import os
@objc @_inheritsConvenienceInitializers @objcMembers public class ActiveUser : ObjectiveC.NSObject {
  @objc public var id: Swift.String?
  @objc public var firstname: Swift.String?
  @objc public var lastname: Swift.String?
  @objc public var email: Swift.String?
  @objc public var tags: [Swift.String]?
  @objc public var assignedUser: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public struct BidirectionalMessage {
}
public struct Click {
}
@objc extension LiveViewConference.Chatvisor {
  @objc public static var conference: LiveViewConference.ChatvisorConference {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc public class Chatvisor : ObjectiveC.NSObject {
  @objc public static func setup(with config: LiveViewConference.SetupConfiguration)
  @objc public static var liveView: LiveViewConference.ChatvisorLiveView {
    @objc get
  }
  @objc public static var coBrowsing: LiveViewConference.ChatvisorCoBrowsing {
    @objc get
  }
  @objc public static var webChat: LiveViewConference.ChatvisorWebChat {
    @objc get
  }
  @objc public static var configuration: LiveViewConference.ChatvisorConfiguration {
    @objc get
  }
  @objc public static var user: LiveViewConference.ChatvisorUser {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SetupConfiguration : ObjectiveC.NSObject {
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc public init(tenantId: Swift.String, token: Swift.String)
  @objc public func setServerUrl(_ serverUrl: Swift.String)
  @objc public func setCdnUrl(_ cdnUrl: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChatvisorAPI {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ChatvisorCoBrowsing : ObjectiveC.NSObject {
  @objc public func start()
  @objc public func start(_ result: @escaping (LiveViewConference.ChatvisorResult) -> Swift.Void)
  @objc public func stop()
  public func connectionState() -> LiveViewConference.ChatvisorConnectionState
  @available(*, deprecated, message: "Please use connectionState() to determine state")
  public func connected() -> Swift.Bool
  @objc public func onConnectionStateChange(callback: LiveViewConference.ConnectionStateResult?)
  @objc public func shareId() -> Swift.String?
  @objc public func setUIEnabled(_ enabled: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ChatvisorConference : ObjectiveC.NSObject {
  @objc public func start(conferenceProperties: LiveViewConference.ConferenceProperties, showInviteDialog: Swift.Bool = false)
  @objc public func start(conferenceProperties: LiveViewConference.ConferenceProperties, showInviteDialog: Swift.Bool = false, _ result: @escaping (LiveViewConference.ChatvisorResult) -> Swift.Void)
  @objc public func join(conferenceProperties: LiveViewConference.ConferenceProperties)
  @objc public func join(conferenceProperties: LiveViewConference.ConferenceProperties, _ result: @escaping (LiveViewConference.ChatvisorResult) -> Swift.Void)
  @objc public func queueStatus(completion: @escaping (Swift.Int) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ChatvisorConfiguration : ObjectiveC.NSObject {
  @objc public func setCdnServer(hostname: Swift.String)
  @objc public func setServer(hostname: Swift.String)
  @objc deinit
}
@objc public enum ChatvisorConnectionState : Swift.Int {
  case disconnected
  case connecting
  case connected
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ChatvisorLiveView : ObjectiveC.NSObject {
  public func connectionState() -> LiveViewConference.ChatvisorConnectionState
  @available(*, deprecated, message: "Please use connectionState() to determine state")
  public func connected() -> Swift.Bool
  @objc public func start()
  @objc public func start(_ result: @escaping (LiveViewConference.ChatvisorResult) -> Swift.Void)
  @objc public func stop()
  @objc public func tag(_ tag: Swift.String)
  @objc public func tag(_ tag: Swift.String, _ result: @escaping (LiveViewConference.ChatvisorResult) -> Swift.Void)
  @objc public func setChatOverlayEnabled(isVisible: Swift.Bool)
  @objc public func onConnectionStateChange(callback: LiveViewConference.ConnectionStateResult?)
  @objc public func shareId() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ChatvisorResult : ObjectiveC.NSObject {
  public var success: Any? {
    get
  }
  public var failure: Swift.Error? {
    get
  }
  convenience public init<Success, Failure>(_ result: Swift.Result<Success, Failure>) where Failure : Swift.Error
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ChatvisorUser : ObjectiveC.NSObject {
  @objc public func tag(_ user: LiveViewConference.ActiveUser)
  @objc public func tag(_ user: LiveViewConference.ActiveUser, _ result: @escaping (LiveViewConference.ChatvisorResult) -> Swift.Void)
  @objc public func clear()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ChatvisorWebChat : ObjectiveC.NSObject {
  @objc public func open()
  @objc public func open(_ result: @escaping (LiveViewConference.ChatvisorResult) -> Swift.Void)
  @objc public func open(for tenantId: Swift.String)
  @objc public func open(for tenantId: Swift.String, _ result: @escaping (LiveViewConference.ChatvisorResult) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommunicationBase {
  public func registerStatus()
  public func releaseStatus()
  public func release(id: Swift.String)
  public func releaseAll()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ConferenceProperties : ObjectiveC.NSObject {
  @objc public var customerId: Swift.String?
  @objc public var firstname: Swift.String?
  @objc public var lastname: Swift.String?
  @objc public var displayName: Swift.String?
  @objc public var email: Swift.String?
  @objc public var phoneNumber: Swift.String?
  @objc public func withActiveUser(activeUser: LiveViewConference.ActiveUser?) -> LiveViewConference.ConferenceProperties
  @objc override dynamic public init()
  @objc deinit
}
extension LiveViewConference.Injection {
  public static func addConferenceToContainer(container: Dip.DependencyContainer)
}
@_hasMissingDesignatedInitializers public class Injection {
  public static func getContainer() -> Dip.DependencyContainer
  @objc deinit
}
public typealias ConnectionStateResult = (_ state: LiveViewConference.ChatvisorConnectionState) -> Swift.Void
@_hasMissingDesignatedInitializers public class UserUtil {
  public static func tagUserIfNeeded(callback: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
extension LiveViewConference.ChatvisorConnectionState : Swift.Equatable {}
extension LiveViewConference.ChatvisorConnectionState : Swift.Hashable {}
extension LiveViewConference.ChatvisorConnectionState : Swift.RawRepresentable {}
